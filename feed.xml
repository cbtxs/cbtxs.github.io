<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://cbtxs.github.io/</id><title>cbtxs</title><subtitle>computer science student, emacs enthusiast, keyboard lover. occasionally nerdy.</subtitle> <updated>2025-06-25T11:29:07+08:00</updated> <author> <name>cbtxs</name> <uri>https://cbtxs.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://cbtxs.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://cbtxs.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 cbtxs </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>数学分析（级数收敛性判别法）</title><link href="https://cbtxs.github.io/posts/sequence_convergence/" rel="alternate" type="text/html" title="数学分析（级数收敛性判别法）" /><published>2024-01-08T20:04:14+08:00</published> <updated>2024-01-08T20:04:14+08:00</updated> <id>https://cbtxs.github.io/posts/sequence_convergence/</id> <content src="https://cbtxs.github.io/posts/sequence_convergence/" /> <author> <name>cbtxs</name> </author> <category term="数学分析" /> <summary> 写在前面 考研4年过去了，好多数学分析的知识都没有用到，已经忘完了，所以搞个文档回顾一下 以前的知识，本文档记录一下所有的与级数有关的定理。 数项级数的收敛性判断 考虑数列 \(a_n\) 数项级数 \(S_n = \sum_{k=0}^n a_k\) 的收敛性可以由 \(a_n\) 的性质得出。首先是顶级炸弹：柯西收敛准则 柯西收敛准则: \(S_n\) 收敛的充要条件为 \(\forall \epsilon &amp;gt; 0\), 存在 \(N\) s.t. \(\forall m &amp;gt; N, p &amp;gt; 0\) \[|S_{m+p} - S_m| = |a_{m+1}+...+a_{m+p}| &amp;lt; \epsilon\] 下面是一些当 \(a_n \geq 0\) 时使用的一些判别法： 比较判别法 当 \(0 \leq a... </summary> </entry> <entry><title>微分、变分和非线性问题</title><link href="https://cbtxs.github.io/posts/nonlinear-paralioc/" rel="alternate" type="text/html" title="微分、变分和非线性问题" /><published>2022-10-31T12:04:14+08:00</published> <updated>2022-10-31T12:04:14+08:00</updated> <id>https://cbtxs.github.io/posts/nonlinear-paralioc/</id> <content src="https://cbtxs.github.io/posts/nonlinear-paralioc/" /> <author> <name>cbtxs</name> </author> <category term="偏微分方程数值解" /> <summary> 写在前面 变分是一个非常强大的数学工具, 在计算数学理论和算法设计中有很多应用.冯康院士借助变分原理奠定了有限元计算方法的严格数学理论, 为后世有限元计算方法的实际应用提供了理论保证, 是近代中国数学的巨大创新. 在笔者学习的过程中发现很多资料中只讲了变分的计算, 没有说明计算出来的变分是什么?但是事实上变分就是无穷维Hilbert空间上的微分. 所以本文从微分出发,讲一讲微分与变分之间的联系, 最后使用 FEALPy, 基于变分求解一个非线性抛物方程. 一、微分 定义: 设函数 \(f\) 为在 \(x_0\) 邻域有定义的函数, 若存在 \(A \in \mathbb R\), 使得 \[\Delta f = f(x_0+\Delta x) - f(x_0) = A \Delta x + O(\Delta x),\] 则称 \(f\) 在 \(x_0\)... </summary> </entry> <entry><title>有限元外微分(三)：同调代数</title><link href="https://cbtxs.github.io/posts/exterior_calculus_3/" rel="alternate" type="text/html" title="有限元外微分(三)：同调代数" /><published>2022-08-07T17:04:14+08:00</published> <updated>2022-09-03T20:35:06+08:00</updated> <id>https://cbtxs.github.io/posts/exterior_calculus_3/</id> <content src="https://cbtxs.github.io/posts/exterior_calculus_3/" /> <author> <name>cbtxs</name> </author> <category term="偏微分方程数值解" /> <summary> 写在前面 本文讲有限元中涉及到的同调代数 de Rham 复形 de Rham 复形是一列空间和映射: \[0 \to \Lambda^0(\Omega) \xrightarrow{ \mathrm{d}} \Lambda^1(\Omega) \xrightarrow{ \mathrm{d}} \cdots \xrightarrow{ \mathrm{d}} \Lambda^n(\Omega) \to 0\] 因为 \(\mathrm{d}\circ \mathrm{d} = 0\), 所以 \(\forall k \in \{0, 1, \cdots, n\}\): \[\mathcal{R}( \mathrm{d}: \Lambda^{k-1}(\Omega) \to \Lambda^k(\Omega)) \subset \mathcal{N}( \mathrm{d}... </summary> </entry> <entry><title>Green's function</title><link href="https://cbtxs.github.io/posts/greenfunction/" rel="alternate" type="text/html" title="Green's function" /><published>2022-06-21T11:02:14+08:00</published> <updated>2022-06-22T10:11:06+08:00</updated> <id>https://cbtxs.github.io/posts/greenfunction/</id> <content src="https://cbtxs.github.io/posts/greenfunction/" /> <author> <name>cbtxs</name> </author> <category term="偏微分方程数值解" /> <summary> Poisson 方程的格林函数 考虑问题: \[\begin{cases} -\Delta u = f \quad \text{in} \ \Omega\\ u = g \quad \text{on} \ \partial \Omega \end{cases} \qquad \qquad (1)\] \(\Omega \in \mathbb R^3\). 假设 \(G(x)\) 满足: \[\begin{cases} -\Delta G = \delta_0 \quad \text{in} \ \Omega\\ G = 0 \quad \text{on} \ \partial \Omega \end{cases} \qquad \qquad (2)\] 则有: \[\begin{aligned} u(x) &amp;amp; = \int_{\Ome... </summary> </entry> <entry><title>Cuthill-Mckee 算法</title><link href="https://cbtxs.github.io/posts/cuthill_mckee/" rel="alternate" type="text/html" title="Cuthill-Mckee 算法" /><published>2022-06-08T11:02:14+08:00</published> <updated>2022-06-08T11:02:14+08:00</updated> <id>https://cbtxs.github.io/posts/cuthill_mckee/</id> <content src="https://cbtxs.github.io/posts/cuthill_mckee/" /> <author> <name>cbtxs</name> </author> <category term="高性能计算" /> <summary> 写在前面 如何高效的求解矩阵方程是计算数学中的核心问题, 在大多数偏微分方程数值方法中, 需要计算的矩阵是稀疏矩阵. 稀疏矩阵有一个 带宽 的概念: 一个矩阵某一行的第一个非零元位置到最后一个非零元的距离称为这一行的带宽, 矩阵最大行带宽就是矩阵的带宽. 为了能够快速求解, 一般希望矩阵的带宽越小越好. Cuthill-Mckee 算法就是一种降低矩阵带宽的算法. \[\begin{pmatrix} 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\ 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\ 0 &amp;amp; 1 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\\ 1 &amp;... </summary> </entry> </feed>
